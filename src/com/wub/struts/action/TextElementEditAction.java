/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.wub.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.wub.db.Administrators;
import com.wub.db.TextElements;
import com.wub.handlers.AdminUserHandler;
import com.wub.handlers.AppraisalHandler;
import com.wub.struts.form.AdministratorEditForm;
import com.wub.struts.form.TextElementEditForm;

/** 
 * MyEclipse Struts
 * Creation date: 01-06-2008
 * 
 * XDoclet definition:
 * @struts.action path="/textElementEdit" name="textElementEditForm" input="/form/textElementEdit.jsp" scope="request" validate="true"
 */
public class TextElementEditAction extends DispatchAction {

	
	/**
	 * Bereitet das editieren eines Text-Elementes vor
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward editTextElement(
		ActionMapping mapping,
		ActionForm form,
		HttpServletRequest request,
		HttpServletResponse response) {
		
		TextElementEditForm textElementEditForm = (TextElementEditForm) form;
		if (textElementEditForm == null) {
			textElementEditForm = new TextElementEditForm();
		}
		
		// id aus request lesen
		int id = Integer.parseInt(request.getParameter("textId"));
		
		// element info auslesen und in session speichern
		TextElements textElementRow = AppraisalHandler.getInstance().getTextElementById(id);
		
		// die daten werden in einer form gespeichert, welche in der session abgespeichert wird
		textElementEditForm.setTextId(textElementRow.getTextId());
		textElementEditForm.setTitle(textElementRow.getTitle());
		textElementEditForm.setText(textElementRow.getText());
		
		request.getSession().setAttribute(AppraisalHandler.TEXTELEMENTEDITFORM, textElementEditForm);
		
		return mapping.findForward("showEdit");
		
	}
	
	/** 
	 * Methode um Text Elemente zu löschen
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward deleteTextElement(
		ActionMapping mapping,
		ActionForm form,
		HttpServletRequest request,
		HttpServletResponse response) {
		
		//AdministratorEditForm administratorEditForm = (AdministratorEditForm) form;
		
		// id aus request lesen
		int id = Integer.parseInt(request.getParameter("textId"));
		
		// Text Element Anhand der ID löschen
		AppraisalHandler.getInstance().deleteTextElementById(id);
		
		return mapping.findForward("showList");
	}
	
	/** 
	 * Methode addTextElement leitet weiter auf eine Seite um ein neues Element hinzuzufügen.
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward addTextElement (
		ActionMapping mapping,
		ActionForm form,
		HttpServletRequest request,
		HttpServletResponse response) {
		
		//AdministratorEditForm administratorEditForm = (AdministratorEditForm) form;
		
		return mapping.findForward("showAdd");
		
	}
	
	/** 
	 * Methode speichert ein TextElement
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveTextElement (
		ActionMapping mapping,
		ActionForm form,
		HttpServletRequest request,
		HttpServletResponse response) {
		
		TextElementEditForm textElementEditForm = (TextElementEditForm) form;
		
		// Form validieren
		
		if (textElementEditForm.getTitle() != null &&
			textElementEditForm.getTitle().length() > 0 &&
			textElementEditForm.getText() != null &&
			textElementEditForm.getText().length() > 0)
		{
			
			// wenn eine ID vorhanden ist, wird diese wiederverwendet, ansonsten wird
			// ein neuer Datensatz angelegt werden
			Integer textId = textElementEditForm.getTextId();
			if (textId != null && textId > 0) {
				// bestehender Eintrag
				TextElements oldTextElement = AppraisalHandler.getInstance().getTextElementById(textId);
				oldTextElement.setTitle(textElementEditForm.getTitle());
				oldTextElement.setText(textElementEditForm.getText());
				
				AppraisalHandler.getInstance().editTextElement(oldTextElement);
			}
			else 
			{
				// neuer Datensatz
				TextElements newTextElementRow = new TextElements();
				newTextElementRow.setTitle(textElementEditForm.getTitle());
				newTextElementRow.setText(textElementEditForm.getText());
				
				AppraisalHandler.getInstance().createTextElement(newTextElementRow);				
			}
		}
		else {
			// Form nochmals anzeigen
			request.getSession().setAttribute(AppraisalHandler.TEXTELEMENTEDITFORM, textElementEditForm);
			if (textElementEditForm.getTextId() != null) {
				// bestehender Eintrag -> edit
				return mapping.findForward("showEdit");
			} else {
				// neuer Eintrag -> add
				return mapping.findForward("showAdd");
			}
		}
		
		return mapping.findForward("showList");
		
	}
	
	
}
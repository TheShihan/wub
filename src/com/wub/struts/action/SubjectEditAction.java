/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.wub.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.wub.db.Subjects;
import com.wub.db.TextElements;
import com.wub.handlers.AppraisalHandler;
import com.wub.struts.form.SubjectEditForm;
import com.wub.struts.form.SubjectEditForm;

/**
 * MyEclipse Struts Creation date: 01-10-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/subjectEdit" name="subjectEditForm"
 *                parameter="do" scope="request"
 *                validate="true"
 * @struts.action-forward name="showEdit" path="page.appraisalEditSubject"
 * @struts.action-forward name="showAdd" path="page.appraisalAddSubject"
 */
public class SubjectEditAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	
	
	/**
	 * Methode um Subjects zu editieren
	 */
	public ActionForward editSubject(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		SubjectEditForm subjectEditForm = (SubjectEditForm) form;
		if (subjectEditForm == null) {
			subjectEditForm = new SubjectEditForm();
		}

		// id aus request lesen
		int id = Integer.parseInt(request.getParameter("subjectId"));

		// element info auslesen und in session speichern
		Subjects subjectRow = AppraisalHandler.getInstance().getSubjectById(id);

		// die daten werden in einer form gespeichert, welche in der session
		// abgespeichert wird
		subjectEditForm.setSubjectId(subjectRow.getSubjectId());
		subjectEditForm.setName(subjectRow.getName());

		request.getSession().setAttribute(AppraisalHandler.SUBJECTEDITFORM,
				subjectEditForm);

		return mapping.findForward("showEdit");

	}

	/**
	 * Methode um Subjects zu löschen
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward deleteSubject(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		// id aus request lesen
		int id = Integer.parseInt(request.getParameter("subjectId"));

		// Text Element Anhand der ID löschen
		AppraisalHandler.getInstance().deleteSubjectById(id);

		return mapping.findForward("showList");
	}

	/**
	 * Methode addSubject leitet weiter auf eine Seite um ein neues Element
	 * hinzuzufügen.
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward addSubject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		return mapping.findForward("showAdd");

	}

	/**
	 * Methode speichert ein Subject
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveSubject(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		SubjectEditForm subjectEditForm = (SubjectEditForm) form;

		// Form validieren

		if (subjectEditForm.getName() != null
				&& subjectEditForm.getName().length() > 0) {

			// wenn eine ID vorhanden ist, wird diese wiederverwendet, ansonsten
			// wird ein neuer Datensatz angelegt werden
			Integer id = subjectEditForm.getSubjectId();
			if (id != null && id > 0) {
				// bestehender Eintrag
				Subjects oldSubject = AppraisalHandler.getInstance()
						.getSubjectById(id);
				oldSubject.setName(subjectEditForm.getName());

				AppraisalHandler.getInstance().editSubject(oldSubject);
			} else {
				// neuer Datensatz
				Subjects newSubjectRow = new Subjects();
				newSubjectRow.setName(subjectEditForm.getName());

				AppraisalHandler.getInstance().createSubject(newSubjectRow);
			}
		}
		else
		{
			// Seite nochmals anzeigen
			if (subjectEditForm.getSubjectId() != null) {
				// Form erneut in den Request speichern
				request.getSession().setAttribute(AppraisalHandler.SUBJECTEDITFORM,
						subjectEditForm);
				
				// bestehenes Subjekt
				return mapping.findForward("showEdit");
			} else {
				// neues Subjekt
				return mapping.findForward("showAdd");
			}
		}

		return mapping.findForward("showList");

	}

}
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.wub.struts.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.actions.DispatchAction;

import com.wub.db.AppraisalBasic;
import com.wub.db.AppraisalConf;
import com.wub.handlers.AppraisalHandler;
import com.wub.struts.form.AppraisalConfigEditForm;
import com.wub.struts.form.AppraisalCoreBasicEditForm;

/**
 * MyEclipse Struts Creation date: 01-17-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/appraisalCoreBasicEditForm"
 *                name="appraisalCoreBasicEditFormForm" parameter="do"
 *                scope="request" validate="true"
 */
public class AppraisalCoreBasicEditFormAction extends DispatchAction {

	/**
	 * Methode um Basis zu editieren
	 */
	public ActionForward editBasic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		// id aus request lesen
		int id = Integer.parseInt(request.getParameter("appraisalId"));
		
		// Form vorbereiten
		AppraisalCoreBasicEditForm coreBasicEditForm = new AppraisalCoreBasicEditForm();
		
		AppraisalBasic appBasic = AppraisalHandler.getInstance().getAppraisalBasicById(id);
		
		// basis werte von DB auslesen und abfüllen
		coreBasicEditForm.setAppraisalId(appBasic.getAppraisalId());
		coreBasicEditForm.setLocked(Integer.parseInt(Byte.toString(appBasic.getLocked())));
		coreBasicEditForm.setName(appBasic.getName());
		coreBasicEditForm.setVoteStyle(appBasic.getVoteStyle());
		
		// Konfigurationseinstellungen übernehmen
		// ------------------------------------------
		// die zu dieser Beurteilung bereits vorhanden Konfigurationen auslesen
		List<AppraisalConf> appConfList = AppraisalHandler.getInstance().getAppraisalBasicConfListById(id);
		// die Standard Konfigurationen laden (Formulare mit allen Text-Elementen die vorhanden sind
		List coreConfEditFormList = AppraisalHandler.getInstance().getDefaultAppraisalConfEditList();
		// die liste iterieren und werte übertragen
		for (Object object : coreConfEditFormList) {
			AppraisalConfigEditForm basicEditForm = (AppraisalConfigEditForm)object;
			int currTextId = basicEditForm.getTextId();
			boolean isElementInList = false;
			for (Object appConfObj : appConfList) {
				if (((AppraisalConf)appConfObj).getTextId() == currTextId) {
					isElementInList = true;
					break;
				}
			}
			if (isElementInList) {
				basicEditForm.setActive(true);
			} else {
				basicEditForm.setActive(false);
			}
		}
		
		coreBasicEditForm.setAppraisalConfigs(coreConfEditFormList);
		
		request.getSession().setAttribute("coreBasicEditForm", coreBasicEditForm);

		return mapping.findForward("showEdit");

	}

	/**
	 * Methode um Basis zu löschen
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward deleteBasic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		// id aus request lesen
		int id = Integer.parseInt(request.getParameter("appraisalId"));

		// Element Anhand der ID löschen
		AppraisalHandler.getInstance().deleteAppraisalBasicById(id);

		return mapping.findForward("showList");
	}

	/**
	 * Methode leitet weiter auf eine Seite um ein neues Element hinzuzufügen.
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward addBasic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		AppraisalCoreBasicEditForm coreBasicEditForm = new AppraisalCoreBasicEditForm();
		List coreConfEditFormList = AppraisalHandler.getInstance().getDefaultAppraisalConfEditList();
		
		coreBasicEditForm.setAppraisalConfigs(coreConfEditFormList);
		
		request.getSession().setAttribute("coreBasicEditForm", coreBasicEditForm);

		return mapping.findForward("showAdd");

	}

	/**
	 * Methode speichert eine neue Basis
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveBasic(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		@SuppressWarnings("unused")
		AppraisalCoreBasicEditForm basicEditForm = (AppraisalCoreBasicEditForm) form;

		boolean formIsInvalid = false;
		ActionErrors errors = new ActionErrors();
		
		// Form validieren
		if (basicEditForm.getName() == null ||
				basicEditForm.getName().length() == 0 )
		{
			errors.add("noname", new ActionMessage("error.appraisal.noname"));
			formIsInvalid = true;
		}
		List configurations = basicEditForm.getAppraisalConfigs();
		int selectedConfigurations = 0;
		for (Object config : configurations) {
			// wir brauchen mindestens 5 und maximal 30 Texte/Konfigurationen
			if (((AppraisalConfigEditForm)config).getActive() != null &&
					((AppraisalConfigEditForm)config).getActive() == true)
			{
				selectedConfigurations++;
			}
		}
		if (!(selectedConfigurations >= 5 && selectedConfigurations <= 30))
		{
			// falsche Anzahl von Konfigurationen/ausgewählten Text-Elementen
			errors.add("confcount", new ActionMessage("error.appraisal.confcount"));
			formIsInvalid = true;
		}
		
		
		if (formIsInvalid)
		{
			// fehlerhaftes Form erneut anzeigen (die Fehler können leider noch nicht angezeigt werden)
			request.getSession().setAttribute("coreBasicEditForm", basicEditForm);

			return mapping.findForward("showAdd");
		}
		else
		{
			// speichern der Daten
			byte locked;
			if (basicEditForm.getLocked() == null || basicEditForm.getLocked() == 0)
			{
				locked = 0;
			}
			else
			{
				locked = 1;
			}
			// prüfen ob name schon vorhanden, wenn ja wird dieser leicht angepasst
			String name = basicEditForm.getName();
			if (AppraisalHandler.getInstance().appraisalBasicNameExists(name)) {
				name = name + " NEW";
			}
			
			Integer voteStyle = basicEditForm.getVoteStyle();
				
			if (basicEditForm.getAppraisalId() != null)
			{
				// bestehendes Grundgerüst
				AppraisalBasic oldBasic =
					AppraisalHandler.getInstance().getAppraisalBasicById(basicEditForm.getAppraisalId());
				oldBasic.setLocked(locked);
				oldBasic.setName(name);
				oldBasic.setVoteStyle(voteStyle);
				
				// speichere editierte Basis
				AppraisalHandler.getInstance().editAppraisalBasic(oldBasic);
				
				// Konfigurationen auch ändern:
				List<AppraisalConf> appraisalConfList = new ArrayList<AppraisalConf>();
				Short confOrder = 1;
				for (Object appraisalConfForm : configurations) {
					if (((AppraisalConfigEditForm)appraisalConfForm).getActive() != null &&
						((AppraisalConfigEditForm)appraisalConfForm).getActive())
					{
						AppraisalConf basicConf = new AppraisalConf();
						basicConf.setAppraisalId(basicEditForm.getAppraisalId()); // id aus der "alten" Basis
						basicConf.setTextId(((AppraisalConfigEditForm)appraisalConfForm).getTextId());
						basicConf.setItemOrder(confOrder);
						// form zur Liste hinzufügen
						appraisalConfList.add(basicConf);
						confOrder++;
					}
				}
				// ... und speichern
				AppraisalHandler.getInstance().editAppraisalBasicConfig(basicEditForm.getAppraisalId(), appraisalConfList);
			}
			else
			{
				// neues Grundgerüst muss erstellt werden
				AppraisalBasic basic = new AppraisalBasic();
				basic.setLocked(locked);
				basic.setName(name);
				basic.setVoteStyle(voteStyle);
				
				// save basic
				int lastInsertedId = AppraisalHandler.getInstance().saveAppraisalBasic(basic);
				
				// nur die Basic-Configs speichern falls die Basic gespeichert wurde
				if (lastInsertedId != 0)
				{
					List<AppraisalConf> appraisalConfList = new ArrayList<AppraisalConf>();
					Short confOrder = 1;
					for (Object appraisalConfForm : configurations) {
						if (((AppraisalConfigEditForm)appraisalConfForm).getActive() != null &&
							((AppraisalConfigEditForm)appraisalConfForm).getActive())
						{
							AppraisalConf basicConf = new AppraisalConf();
							basicConf.setAppraisalId(lastInsertedId); // id aus der Basic
							basicConf.setTextId(((AppraisalConfigEditForm)appraisalConfForm).getTextId());
							basicConf.setItemOrder(confOrder);
							// form zur Liste hinzufügen
							appraisalConfList.add(basicConf);
							confOrder++;
						}
					}
					// Liste speichern
					AppraisalHandler.getInstance().saveAppraisalBasicConfigurations(appraisalConfList);
				}
			}
			
			return mapping.findForward("showList");
		}
		
	}

}